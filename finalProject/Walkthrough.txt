PARTE 1: SETEO INICIAL -----------------------------------------------------------------------------------------------------------------------
En linux: 

EPP: 
(la parte de -m es para ejecutar modulos de python directamente desde la terminal, un módulo es básicamente un archivo Python)
python -m modulo ejecuta el módulo "modulo" en la ruta de módulos, sin extensión.
python modulo.py ejecuta el archivo directamente, con extensión.

0. Abrir un Virtual env 
1 DESCARGAR PIP: python3.11 -m ensurepip
2 INSTALLAR DJANGO: python3.11 -m pip install Django 
3 INICIAR PROYECTO (Proyecto es una carpeta): django-admin startproject customer360 && cd customer360 
4 Aplicar cambios de la base de datos hechos con el ORM en migrations/ (make migrations) y subirlos (migrate): python3.11 manage.py makemigrations && python3.11 manage.py migrate  
5 INICIAR SERVER: python3.11 manage.py runserver


PARTE 2: SETEO DE PROYECTO -----------------------------------------------------------------------------------------------------------------------

settings.py:**************************** 
ALLOWED_HOSTS=["*"]


Añadir el proyecto como app en Installed Apps: 
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'customer360'
]


setear CSRF para el proyecto específicamente: 

CSRF_TRUSTED_ORIGINS = ['https://*.cognitiveclass.ai']

Importar estos módulos para usar Path: 
from pathlib import Path
import os

Especificar donde se buscan los static files: 

STATICFILES_DIRS = (
    os.path.join(BASE_DIR,"static/"),
)


PARTE 3: MODELOS y TEMPLATES -----------------------------------------------------------------------------------------------------------------------

crear archivo python de los módelos: 

touch /home/project/customer360/customer360/models.py
y dentro del archivo: from django.db import models 


Creo una tabla llamada Customer con un id, un nombre que es un string, un email que tiene valor de email field, phone que es un charfield, y direccion que también es un string. 

class Customer(models.Model):
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=100)
    email = models.EmailField(max_length=100)
    phone = models.CharField(max_length=20)
    address = models.CharField(max_length=200)

    def __str__(self):
        return str(self.id)

Luego creo una tabla que llame al customer y le registre algunos datos dependiendo de una llamada telefónica que haya tenido, aquí se ve como en la opcion choises= 
de un campo le puede pasar una lista con tuplas que se pueden setear para solo ser opciones válidas: 

class Interaction(models.Model):
    CHANNEL_CHOICES = [
        ('phone', 'Phone'),
        ('sms', 'SMS'),
        ('email', 'Email'),
        ('letter', 'Letter'),
    ]

    DIRECTION_CHOICES = [
        ('inbound', 'Inbound'),
        ('outbound', 'Outbound'),
    ]

    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
    channel = models.CharField(max_length=15, choices=CHANNEL_CHOICES)
    direction = models.CharField(max_length=10, choices=DIRECTION_CHOICES)
    interaction_date = models.DateField(auto_now_add=True)
    summary = models.TextField()


Luego creo unos archivos .html y un directorio templates/:

mkdir /home/project/customer360/customer360/templates
touch /home/project/customer360/customer360/templates/add.html
touch /home/project/customer360/customer360/templates/base.html
touch /home/project/customer360/customer360/templates/index.html
touch /home/project/customer360/customer360/templates/interact.html
touch /home/project/customer360/customer360/templates/summary.html


Luego en base.html: 


{% load static %} //necesario para cargar cosas estáticas en Jinja2 
<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css"> //Carga Boostrap 
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script> //Carga Boostrap 
        <link rel="stylesheet" href="{% static 'css/main.css' %}"> //Carga el documento .css con los estilos de CSS. 
    </head>
    <body>
        <nav class="navbar navbar-default"> //crea una barra de nav 
                <ul class="nav navbar-nav">
                    <li>
                        <a style="color:black;" href="/">Home</a> //links a direntes partes 
                    </li>
                    <li>
                        <a  style="color:black;" href="/create">New Customer</a>
                    </li>
                    <li>
                        <a style="color:black;" href="/summary">Summary</a>
                    </li>
                </ul>
        </nav>
        {% block content %} //Acá irá la parte específica de cada archivo html que herede de esta plantilla
        {% endblock %}
    </body>
</html>


Ahora en index.html: 


{% extends 'base.html' %} //extiende la barra de navegación de base.html 
{% load static %} 
{% block content %} // parte específica de este archivo 
<html>
    <head>
        <title>Home Page</title>
    </head>
    <script> // le pasa código JS (?) 
       function set_customer(){
        var cinput = document.querySelector('input[name="selected_customers"]:checked');
            if (cinput){
                cid = cinput.value;
                window.location = "/interact/"+cid;
            }
            else
                alert("Please select a customer");
       }
    </script>
    <body>
        <h1>Welcome to Customer 360</h1>
        <p>Interact and Manage your Customers</p>
        <a class="btn btn-primary" style="font-weight:bold; display:inline" onclick="set_customer()">Interact</a> // esto dispara el código de arriba 

        <table class="table">
            <thead>
                <tr>
                    <th>Customer ID</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Address</th>
                    <th>Selected</th>
                </tr>
            </thead>
            <tbody>
                {% for customer in customers %} //Aca se le pasaron los customers a este archivo html 
                    <tr>
                        <td>{{customer.id }}</td>
                        <td>{{customer.name }}</td>
                        <td>{{customer.email }}</td>
                        <td>{{customer.phone }}</td>
                        <td>{{customer.address }}</td>
                        <td>
                            <input type="radio" name="selected_customers" value="{{ customer.id }}">
                        </td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </body>
</html>
{% endblock content %}



Ahora en add.html: 


{% extends 'base.html' %}
{% load static %}
{% block content %}
<html>
    <head>
        <title>Add a Customer</title>
    </head>
    <body>
        <h1>Add a new Customer</h1>
        <form class="form" method="post" action="/create/"> //esto es un fórmulario POST que envía el IN a la URL que esté en action= 
            {% csrf_token %} //csrf token necesario 
            <div class="form-group">
                <label for="Name">Name </label>
                <input type="text" name="name" required>
            </div>
            <div class="form-group">
                <label for="Email">Email </label>
                <input type="email" name="email" required>
            </div>
            <div class="form-group">
                <label for="Phone">Phone</label>
                <input type="tel" name="phone" required>
            </div>
            <div class="form-group">
                <label for="Address">Address</label>
                <input type="text" name="address" required>
            </div>
            <button type="submit" class="btn btn-success">Add</button>
            <p> {{ msg }} </p>
        </form>
    </body>
</html>
{% endblock content %}


Ahora en interact.html: 

{% extends 'base.html' %}
{% load static %}
{% block content %}
<html>
    <head>
        <title>Interact & Manage</title>
    </head>
    <script>
        function selectButton(element) {
            var buttons = element.parentElement.getElementsByClassName("btn");
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].classList.remove("active");
            }
            element.classList.add("active");
        }
        function check_selected(){
            var dirinput = document.querySelector('input[name="direction"]:checked');
            var chaninput = document.querySelector('input[name="channel"]:checked');
            var summary = document.querySelector('textarea[name="summary"]').value;

            if (!dirinput || !chaninput || summary === ""){
                alert("Please fill all required fields");
                return false;
            }
            return true;
        }
    </script>
    <body>
        <h1>Interact With Your Customers</h1>
        <form class="form" method="post"  onsubmit="return check_selected()" action="#">
            {% csrf_token %}
            <div class="form-group">
                <label>Channel</label>
                <div class="btn-group" data-toggle="buttons">
                    {% for channel in channels %}
                        <label class="btn btn-outline-primary" onclick="selectButton(this)">
                            <input type="radio" name="channel" value="{{ channel.0 }}" required> {{ channel.1 }} //es lo mismo que channel[0] 
                        </label>
                    {% endfor %}
                </div>
            </div>
            <div class="form-group">
                <label>Direction</label>
                <div class="btn-group" data-toggle="buttons">
                    {% for direction in directions %}
                        <label class="btn btn-outline-primary" onclick="selectButton(this)">
                            <input type="radio" name="direction" value="{{ direction.0 }}" required> {{ direction.1 }}
                        </label>
                    {% endfor %}
                </div>
            </div>
            <div class="form-group">
                <label>Summary</label>
                <textarea name="summary"></textarea>
            </div>
            <button type="submit" class="btn btn-success">Save Interaction</button>
            <p>{{ msg }}<p>
        </form>
    </body>
</html>
{% endblock content %}



Ahora en summary.html: 

{% extends 'base.html' %}
{% load static %}
{% block content %}
<html>
    <body>
        <h1> Interactions in last 30 Days  </h1>
        {% if not interactions %} //hay una variable que se le pasa al html llamada interactions  
            <p> there are no interactions in the last 30 days <p>
        {% else %}
            <table class="table">
                <thead>
                    <tr>
                        <th>Channel</th>
                        <th>Direction</th>
                        <th>Count</th>
                    </tr>
                </thead>
                <tbody>
                    {% for interaction in interactions %} 
                        <tr>
                            <td>{{ interaction.channel }}</td>
                            <td>{{ interaction.direction }}</td>
                            <td> {{ interaction.count }} </td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
            <h4> Total : {{ count }} </h4>
        {% endif %}
    </body>
</html>
{% endblock content %}


PARTE 4: CREACION DE LAS VISTAS -----------------------------------------------------------------------------------------------------------------------

Debo crear un documento .py para las vistas 
touch /home/project/customer360/customer360/views.py

importo cosas: 

from django.shortcuts import render
from datetime import date, timedelta
from django.db.models import Count
from .models import *

Creo la primer vista (matcheada al  html de index): 

def index(request):
    customers = Customer.objects.all() //Crear una lista con todos los customers consultando la base de datos. 
    context = {"customers":customers} //context o la data va a ser la lista con todos los cx. 
    return render(request,"index.html",context=context) //se le pasa esta variable a index.html usando context= 


def create_customer(request):
    if request.method == "POST": //si se envían datos al servidor usando POST 
        name = request.POST["name"] // datos input del html se guardan en un diccionario con name, email, etc. Luego eso se recupera de requst.POST y se guarda como variable local en la función. 
        email = request.POST["email"]
        phone = request.POST["phone"]
        address = request.POST["address"]
        customer = Customer.objects.create(name=name,email=email,phone=phone,address=address) //Así crea la fila con esta info. 
        customer.save() //actualiza la base de datos, no es necesario hacer makemigrations porque no tocamos la estructura de la tabla.
        msg = "Successfully Saved a Customer"
        return render(request,"add.html",context={"msg":msg})
    return render(request,"add.html")



def summary(request):
    thirty_days_ago = date.today() - timedelta(days=30)
    interactions = Interaction.objects.filter(interaction_date__gte=thirty_days_ago)

    count = len(interactions)
    interactions = interactions.values("channel","direction").annotate(count=Count('channel')) //values() hace combinatoria de channel y direction, annotate() suma los resultados iguales. 
    context={
                "interactions":interactions,
                "count":count
             }

    return render(request,"summary.html",context=context)

//en general lo que hace es, sacar los datos de la base, modificarlos y luego pasarlos en el return como diccionario a la variable context. 

para la vista de abajo hay que recordar la tabla: 

class Interaction(models.Model):
    CHANNEL_EMAIL = 'email'
    CHANNEL_PHONE = 'phone'
    CHANNEL_CHOICES = [
        (CHANNEL_EMAIL, 'Email'),
        (CHANNEL_PHONE, 'Phone'),
    ]

Yo puedo acceder a atributos de clase (porque los tienen todas las instancias de esta clase, como si fueran CONST) realizando esto:
NombreClase.atributo.

channels = Interaction.CHANNEL_CHOICES

def interact(request,cid):

    channels = Interaction.CHANNEL_CHOICES //acá accedo a la clase y a su lista. 
    directions = Interaction.DIRECTION_CHOICES
    context = {"channels":channels,"directions":directions} //el conteto que voy a pasar. 

    if request.method == "POST":

        customer = Customer.objects.get(id=cid) 
        channel = request.POST["channel"]
        direction = request.POST["direction"]
        summary = request.POST["summary"]
        interaction = Interaction.objects.create(
                                    customer=customer,
                                    channel=channel,
                                    direction=direction,
                                    summary=summary)
        interaction.save()
        context["msg"] = "Interaction Success"
        return render(request,"interact.html",context=context)

    return render(request,"interact.html",context=context)


Por qué la vista de arriba recibe dos parámetros? RTA: Hay algunas vistas o funciones que reciben varios parámetros aparte de request: 

def interact(request, cid, var3, var4):

estas se pasan a la vista por medio de la URL: 

urlpatterns = [
    path('interact/<int:cid>/<int:var3>/<int:var4>/', views.interact, name='interact'),
]

/interact/1/2/3/  -> interact(request, 1, 2, 3)



PARTE 5: CREACION DE URLS -----------------------------------------------------------------------------------------------------------------------
en urls.py:

agregar: 
from . import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',views.index,name="index"), //el name es como asignarlo a la varianble index para que cuando la vayamos a pasar en otras partes, podamos usar esta var y no su dirección relativa :p. 
    path('create/',views.create_customer,name='create_customer'),
    path('interact/<int:cid>',views.interact,name='interact'),
    path('summary/',views.summary,name='summary'),
]
