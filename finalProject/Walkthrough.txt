PARTE 1: SETEO INICIAL -----------------------------------------------------------------------------------------------------------------------
En linux: 

EPP: 
(la parte de -m es para ejecutar modulos de python directamente desde la terminal, un módulo es básicamente un archivo Python)
python -m modulo ejecuta el módulo "modulo" en la ruta de módulos, sin extensión.
python modulo.py ejecuta el archivo directamente, con extensión.

0. Abrir un Virtual env 
1 DESCARGAR PIP: python3.11 -m ensurepip
2 INSTALLAR DJANGO: python3.11 -m pip install Django 
3 INICIAR PROYECTO (Proyecto es una carpeta): django-admin startproject customer360 && cd customer360 
4 Aplicar cambios de la base de datos hechos con el ORM en migrations/ (make migrations) y subirlos (migrate): python3.11 manage.py makemigrations && python3.11 manage.py migrate  
5 INICIAR SERVER: python3.11 manage.py runserver


PARTE 2: SETEO DE PROYECTO -----------------------------------------------------------------------------------------------------------------------

settings.py:**************************** 
ALLOWED_HOSTS=["*"]


Añadir el proyecto como app en Installed Apps: 
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'customer360'
]


setear CSRF para el proyecto específicamente: 

CSRF_TRUSTED_ORIGINS = ['https://*.cognitiveclass.ai']

Importar estos módulos para usar Path: 
from pathlib import Path
import os

Especificar donde se buscan los static files: 

STATICFILES_DIRS = (
    os.path.join(BASE_DIR,"static/"),
)


PARTE 3: MODELOS y TEMPLATES -----------------------------------------------------------------------------------------------------------------------

crear archivo python de los módelos: 

touch /home/project/customer360/customer360/models.py
y dentro del archivo: from django.db import models 


Creo una tabla llamada Customer con un id, un nombre que es un string, un email que tiene valor de email field, phone que es un charfield, y direccion que también es un string. 

class Customer(models.Model):
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=100)
    email = models.EmailField(max_length=100)
    phone = models.CharField(max_length=20)
    address = models.CharField(max_length=200)

    def __str__(self):
        return str(self.id)

Luego creo una tabla que llame al customer y le registre algunos datos dependiendo de una llamada telefónica que haya tenido, aquí se ve como en la opcion choises= 
de un campo le puede pasar una lista con tuplas que se pueden setear para solo ser opciones válidas: 

class Interaction(models.Model):
    CHANNEL_CHOICES = [
        ('phone', 'Phone'),
        ('sms', 'SMS'),
        ('email', 'Email'),
        ('letter', 'Letter'),
    ]

    DIRECTION_CHOICES = [
        ('inbound', 'Inbound'),
        ('outbound', 'Outbound'),
    ]

    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
    channel = models.CharField(max_length=15, choices=CHANNEL_CHOICES)
    direction = models.CharField(max_length=10, choices=DIRECTION_CHOICES)
    interaction_date = models.DateField(auto_now_add=True)
    summary = models.TextField()


Luego creo unos archivos .html y un directorio templates/:

mkdir /home/project/customer360/customer360/templates
touch /home/project/customer360/customer360/templates/add.html
touch /home/project/customer360/customer360/templates/base.html
touch /home/project/customer360/customer360/templates/index.html
touch /home/project/customer360/customer360/templates/interact.html
touch /home/project/customer360/customer360/templates/summary.html


Luego en base.html: 


{% load static %} //necesario para cargar cosas estáticas en Jinja2 
<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css"> //Carga Boostrap 
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script> //Carga Boostrap 
        <link rel="stylesheet" href="{% static 'css/main.css' %}"> //Carga el documento .css con los estilos de CSS. 
    </head>
    <body>
        <nav class="navbar navbar-default"> //crea una barra de nav 
                <ul class="nav navbar-nav">
                    <li>
                        <a style="color:black;" href="/">Home</a> //links a direntes partes 
                    </li>
                    <li>
                        <a  style="color:black;" href="/create">New Customer</a>
                    </li>
                    <li>
                        <a style="color:black;" href="/summary">Summary</a>
                    </li>
                </ul>
        </nav>
        {% block content %} //Acá irá la parte específica de cada archivo html que herede de esta plantilla
        {% endblock %}
    </body>
</html>


Ahora en index.html: 


{% extends 'base.html' %} //extiende la barra de navegación de base.html 
{% load static %} 
{% block content %} // parte específica de este archivo 
<html>
    <head>
        <title>Home Page</title>
    </head>
    <script> // le pasa código JS (?) 
       function set_customer(){
        var cinput = document.querySelector('input[name="selected_customers"]:checked');
            if (cinput){
                cid = cinput.value;
                window.location = "/interact/"+cid;
            }
            else
                alert("Please select a customer");
       }
    </script>
    <body>
        <h1>Welcome to Customer 360</h1>
        <p>Interact and Manage your Customers</p>
        <a class="btn btn-primary" style="font-weight:bold; display:inline" onclick="set_customer()">Interact</a> // esto dispara el código de arriba 

        <table class="table">
            <thead>
                <tr>
                    <th>Customer ID</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Address</th>
                    <th>Selected</th>
                </tr>
            </thead>
            <tbody>
                {% for customer in customers %} //Aca se le pasaron los customers a este archivo html 
                    <tr>
                        <td>{{customer.id }}</td>
                        <td>{{customer.name }}</td>
                        <td>{{customer.email }}</td>
                        <td>{{customer.phone }}</td>
                        <td>{{customer.address }}</td>
                        <td>
                            <input type="radio" name="selected_customers" value="{{ customer.id }}">
                        </td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </body>
</html>
{% endblock content %}



Ahora en add.html: 


{% extends 'base.html' %}
{% load static %}
{% block content %}
<html>
    <head>
        <title>Add a Customer</title>
    </head>
    <body>
        <h1>Add a new Customer</h1>
        <form class="form" method="post" action="/create/">
            {% csrf_token %}
            <div class="form-group">
                <label for="Name">Name </label>
                <input type="text" name="name" required>
            </div>
            <div class="form-group">
                <label for="Email">Email </label>
                <input type="email" name="email" required>
            </div>
            <div class="form-group">
                <label for="Phone">Phone</label>
                <input type="tel" name="phone" required>
            </div>
            <div class="form-group">
                <label for="Address">Address</label>
                <input type="text" name="address" required>
            </div>
            <button type="submit" class="btn btn-success">Add</button>
            <p> {{ msg }} </p>
        </form>
    </body>
</html>
{% endblock content %}
