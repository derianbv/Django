"""
Django settings for customer360 project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-w-f2#^3p03duy53d2ed9vwi*t6*$dj95s7)gt0!6zte0@xa+hl'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
'''
Son direcciones ip o urls que tienen permitido triguerear nuestra app 
ALLOWED_HOSTS = ['mi-sitio.com', 'www.mi-sitio.com', '123.45.67.89']
En este caso:

http://mi-sitio.com: Acceso permitido.
http://www.mi-sitio.com: Acceso permitido.
http://123.45.67.89: Acceso permitido.
http://otro-sitio.com: Acceso bloqueado.

'''
CSRF_TRUSTED_ORIGINS = ['https://*.cognitiveclass.ai']
#Permitir a sitios externos que manden solicitudes HTTP
#CSRF significa Cross-Site Request Forgery (Falsificación de Solicitudes entre Sitios). Es un tipo de ataque de seguridad web donde un atacante hace que un usuario autenticado realice acciones no deseadas en un sitio web en el que está autenticado.

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

'''
Son partes logicas del codigo que cumplen una función, pueden tener url en la pagina si yo lo decido, pero tengo que agregarlo en URLs 
INSTALLED_APPS = [
    'django.contrib.admin',        # Admin panel (tiene URLs)
    'django.contrib.auth',         # Autenticación de usuarios (no directamente asociada a URLs, pero provee funcionalidades usadas en vistas)
    'django.contrib.contenttypes', # Gestión de tipos de contenido (no tiene URLs)
    'django.contrib.sessions',     # Gestión de sesiones (no tiene URLs)
    'django.contrib.messages',     # Sistema de mensajes (no tiene URLs)
    'django.contrib.staticfiles',  # Gestión de archivos estáticos (no tiene URLs)
    'customer360'                  # App personalizada (podría tener URLs si defines un archivo urls.py), DEBE TENER EL NOMBRE DE LA CARPETA S
]
'''


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'customer360.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'customer360.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

'''
import os

# URL base para archivos estáticos, acá Django buscará los archivos estaticos del proyecto
STATIC_URL = '/static/'

# Directorios adicionales donde buscar archivos estáticos
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static/"),  # Carpeta "static" en la raíz del proyecto
)

# Carpeta donde se recopilarán los archivos estáticos al ejecutar collectstatic (linux)
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles/")

os.path.join() pega urls para que funcionen en cada sistema, windows sera backslash y linux normal slash 

ruta = os.path.join("carpeta1", "carpeta2", "archivo.txt")
print(ruta)
LINUX: carpeta1/carpeta2/archivo.txt
WINDOWS: carpeta1\carpeta2\archivo.txt



Cuando se ejecuta el comando "python manage.py collectstatic", Django recopila todos los archivos estáticos desde:
1. Carpetas static/ dentro de cada app.
2. Directorios definidos en STATICFILES_DIRS.
Todos estos archivos se colocan en un único directorio definido por STATIC_ROOT.


'''
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
